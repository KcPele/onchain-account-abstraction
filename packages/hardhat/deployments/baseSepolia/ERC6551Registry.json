{
  "address": "0xc0aFE163171B296D5e78e7Df50aa49484dDa5146",
  "abi": [
    {
      "inputs": [],
      "name": "AccountCreationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "account",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c527ba161e57906cef03b378371db4fdea78082d3a1e07932fef28b8f2c1ad1",
  "receipt": {
    "to": null,
    "from": "0xf4030DdD79fc7Fd49b25C976C5021D07568B4F91",
    "contractAddress": "0xc0aFE163171B296D5e78e7Df50aa49484dDa5146",
    "transactionIndex": 4,
    "gasUsed": "280285",
    "logsBloom": "0x
    "blockHash": "0xfa98ff48e8f49bb0bd90d3d0a3ecf5a56404e903ef6342e4e065736126b0c8af",
    "transactionHash": "0x9c527ba161e57906cef03b378371db4fdea78082d3a1e07932fef28b8f2c1ad1",
    "logs": [],
    "blockNumber": 11986726,
    "cumulativeGasUsed": "525665",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "504eb49cb29d1062478471eda13e5141",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountCreationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"account(address,uint256,address,uint256,uint256)\":{\"details\":\"Returns the computed token bound account address for a non-fungible token\",\"returns\":{\"_0\":\"The computed address of the token bound account\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NBANFT/ERC6551Registry.sol\":\"ERC6551Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"contracts/NBANFT/ERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"./interfaces/IERC6551Registry.sol\\\";\\nimport \\\"./lib/ERC6551BytecodeLib.sol\\\";\\n\\ncontract ERC6551Registry is IERC6551Registry {\\n    error AccountCreationFailed();\\n\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt,\\n        bytes calldata initData\\n    ) external returns (address) {\\n        bytes memory code = ERC6551BytecodeLib.getCreationCode(\\n            implementation,\\n            chainId,\\n            tokenContract,\\n            tokenId,\\n            salt\\n        );\\n\\n        address _account = Create2.computeAddress(bytes32(salt), keccak256(code));\\n\\n        if (_account.code.length != 0) return _account;\\n\\n        emit AccountCreated(_account, implementation, chainId, tokenContract, tokenId, salt);\\n\\n        assembly {\\n            _account := create2(0, add(code, 0x20), mload(code), salt)\\n        }\\n\\n        if (_account == address(0)) revert AccountCreationFailed();\\n\\n        if (initData.length != 0) {\\n            (bool success, bytes memory result) = _account.call(initData);\\n\\n            if (!success) {\\n                assembly {\\n                    revert(add(result, 32), mload(result))\\n                }\\n            }\\n        }\\n\\n        return _account;\\n    }\\n\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address) {\\n        bytes32 bytecodeHash = keccak256(\\n            ERC6551BytecodeLib.getCreationCode(\\n                implementation,\\n                chainId,\\n                tokenContract,\\n                tokenId,\\n                salt\\n            )\\n        );\\n\\n        return Create2.computeAddress(bytes32(salt), bytecodeHash);\\n    }\\n}\",\"keccak256\":\"0x210bc21eab5e0ae1368b68e753f9ce2bbc617e2eabf8ba312bc5a4eacb67e80f\",\"license\":\"MIT\"},\"contracts/NBANFT/interfaces/IERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry SHALL emit the AccountCreated event upon successful account creation\\n     */\\n    event AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId,\\n        uint256 salt\\n    );\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token\\n     *\\n     * If account has already been created, returns the account address without calling create2\\n     *\\n     * If initData is not empty and account has not yet been created, calls account with\\n     * provided initData after creation\\n     *\\n     * Emits AccountCreated event\\n     *\\n     * @return the address of the account\\n     */\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 seed,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token\\n     *\\n     * @return The computed address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address);\\n}\",\"keccak256\":\"0xd6fb4bfa07d81b5d93a9f7333ca506c56d1c76a01da5201360369e2aaf957f23\",\"license\":\"MIT\"},\"contracts/NBANFT/lib/ERC6551BytecodeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ERC6551BytecodeLib {\\n    function getCreationCode(\\n        address implementation_,\\n        uint256 chainId_,\\n        address tokenContract_,\\n        uint256 tokenId_,\\n        uint256 salt_\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                hex\\\"3d60ad80600a3d3981f3363d3d373d3d3d363d73\\\",\\n                implementation_,\\n                hex\\\"5af43d82803e903d91602b57fd5bf3\\\",\\n                abi.encode(salt_, chainId_, tokenContract_, tokenId_)\\n            );\\n    }\\n}\",\"keccak256\":\"0x8ddfc7d0828b7d81d43f6feb926ff1a8a41dd8f36762c869c252ba7fd46ab3d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761041b908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c80635e9bc5361461003b5763da7323b31461003357600080fd5b61000e6100c1565b3461000e5760a036600319011261000e576020610083610059610095565b6100776100646100ab565b6084359283916064359160243590610319565b838151910120906102f9565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b503461000e5760c036600319011261000e576100db610095565b6100e36100ab565b9060a4359067ffffffffffffffff9081831161000e573660238401121561000e57826004013591821161000e57366024838501011161000e57610153936024610139940191608435916064359160243590610215565b6040516001600160a01b0390911681529081906020820190565b0390f35b908092918237016000815290565b50634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761019857604052565b6101a0610165565b604052565b90601f8019910116810190811067ffffffffffffffff82111761019857604052565b3d15610210573d9067ffffffffffffffff8211610203575b604051916101f7601f8201601f1916602001846101a5565b82523d6000602084013e565b61020b610165565b6101df565b606090565b9091959493926102288482898686610319565b9182519361023c60208501958620876102f9565b90813b6102ec57604080516001600160a01b0393841681526020810192909252810187905290988916918916907f07fba7bba1191da7ee1155dcfa0030701c9c9a9cc34a93b991fc6fd0c9268d8f90606090a451906000f5928316156102da57816102a657505090565b60009182916102ba60405180938193610157565b039082855af16102c86101c7565b90156102d2575090565b602081519101fd5b6040516320188a5960e01b8152600490fd5b5097505050505050505090565b605591600b9160405191604083015260208201523081520160ff81532090565b919290926040519360209586860152604085015260018060a01b0316606084015260808301526080825261034c8261017c565b604051928391733d60ad80600a3d3981f3363d3d373d3d3d363d7360601b828401526bffffffffffffffffffffffff199060601b1660348301526e5af43d82803e903d91602b57fd5bf360881b604883015282519260005b8481106103ce57505050806103cb92605792016000838201520360378101845201826101a5565b90565b8181018301518682016057015285935082016103a456fea26469706673582212208dd36ef7f78e6bffda8f6fffada72fd9c2191affb28aa177f38e4c09f9ec52e364736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c80635e9bc5361461003b5763da7323b31461003357600080fd5b61000e6100c1565b3461000e5760a036600319011261000e576020610083610059610095565b6100776100646100ab565b6084359283916064359160243590610319565b838151910120906102f9565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b503461000e5760c036600319011261000e576100db610095565b6100e36100ab565b9060a4359067ffffffffffffffff9081831161000e573660238401121561000e57826004013591821161000e57366024838501011161000e57610153936024610139940191608435916064359160243590610215565b6040516001600160a01b0390911681529081906020820190565b0390f35b908092918237016000815290565b50634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761019857604052565b6101a0610165565b604052565b90601f8019910116810190811067ffffffffffffffff82111761019857604052565b3d15610210573d9067ffffffffffffffff8211610203575b604051916101f7601f8201601f1916602001846101a5565b82523d6000602084013e565b61020b610165565b6101df565b606090565b9091959493926102288482898686610319565b9182519361023c60208501958620876102f9565b90813b6102ec57604080516001600160a01b0393841681526020810192909252810187905290988916918916907f07fba7bba1191da7ee1155dcfa0030701c9c9a9cc34a93b991fc6fd0c9268d8f90606090a451906000f5928316156102da57816102a657505090565b60009182916102ba60405180938193610157565b039082855af16102c86101c7565b90156102d2575090565b602081519101fd5b6040516320188a5960e01b8152600490fd5b5097505050505050505090565b605591600b9160405191604083015260208201523081520160ff81532090565b919290926040519360209586860152604085015260018060a01b0316606084015260808301526080825261034c8261017c565b604051928391733d60ad80600a3d3981f3363d3d373d3d3d363d7360601b828401526bffffffffffffffffffffffff199060601b1660348301526e5af43d82803e903d91602b57fd5bf360881b604883015282519260005b8481106103ce57505050806103cb92605792016000838201520360378101845201826101a5565b90565b8181018301518682016057015285935082016103a456fea26469706673582212208dd36ef7f78e6bffda8f6fffada72fd9c2191affb28aa177f38e4c09f9ec52e364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "account(address,uint256,address,uint256,uint256)": {
        "details": "Returns the computed token bound account address for a non-fungible token",
        "returns": {
          "_0": "The computed address of the token bound account"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}