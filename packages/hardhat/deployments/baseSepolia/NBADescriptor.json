{
  "address": "0xAB0C15E8a05Aa0dE5cf5d82890F5590529Dd8f03",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes3",
              "name": "color_1",
              "type": "bytes3"
            },
            {
              "internalType": "bytes3",
              "name": "color_2",
              "type": "bytes3"
            },
            {
              "internalType": "bytes3",
              "name": "color_3",
              "type": "bytes3"
            },
            {
              "internalType": "bytes3",
              "name": "color_4",
              "type": "bytes3"
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "mainAccount",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct NFTDescriptor.SVGParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x54eac1ef451e4995e56f56aa035feafb007e4944013edc42b5921e5177dc0dff",
  "receipt": {
    "to": null,
    "from": "0xf4030DdD79fc7Fd49b25C976C5021D07568B4F91",
    "contractAddress": "0xAB0C15E8a05Aa0dE5cf5d82890F5590529Dd8f03",
    "transactionIndex": 6,
    "gasUsed": "1664795",
    "logsBloom": "0x
    "blockHash": "0xd8fb80544f2e2f8c718e7b0d1fbbab20c00961b925d0f5ac0b8d3365da1e6d42",
    "transactionHash": "0x54eac1ef451e4995e56f56aa035feafb007e4944013edc42b5921e5177dc0dff",
    "logs": [],
    "blockNumber": 11987085,
    "cumulativeGasUsed": "5396364",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "504eb49cb29d1062478471eda13e5141",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes3\",\"name\":\"color_1\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"color_2\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"color_3\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"color_4\",\"type\":\"bytes3\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct NFTDescriptor.SVGParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NBANFT/NBADescriptor.sol\":\"NBADescriptor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/NBANFT/NBADescriptor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport 'base64-sol/base64.sol';\\nimport \\\"./lib/NFTDescriptor.sol\\\";\\n\\ncontract NBADescriptor {\\n    using Strings for uint256;\\n    using Strings for uint160;\\n\\n    // @dev generate SVG header\\n    function constructTokenURI(NFTDescriptor.SVGParams memory params) public pure returns (string memory) {\\n        string memory name = string(\\n            abi.encodePacked(\\\"NBA #\\\", params.tokenId.toString())\\n        );\\n        string memory image = Base64.encode(\\n            bytes(NFTDescriptor.generateSVGImage(params))\\n        );\\n        string memory attributes = NFTDescriptor.generateAttributes(params);\\n        string memory description = NFTDescriptor.generateDescription(\\n            params\\n        );\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(\\n                    bytes(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            name,\\n                            '\\\", \\\"description\\\":\\\"',\\n                            description,\\n                            '\\\", \\\"attributes\\\": ',\\n                            attributes,\\n                            ', \\\"image\\\": \\\"',\\n                            \\\"data:image/svg+xml;base64,\\\",\\n                            image,\\n                            '\\\"}'\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n  \\n}\",\"keccak256\":\"0xa17f91343a88fe965a42c195f1594478549d175d5196ad01b2978f78c4f8d7fe\",\"license\":\"MIT\"},\"contracts/NBANFT/lib/NFTDescriptor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport 'base64-sol/base64.sol';\\nimport \\\"./ToColor.sol\\\";\\nimport \\\"./TruncateAddress.sol\\\";\\n\\n/// @notice Helper to generate SVGs\\nlibrary NFTDescriptor {\\n    using Strings for uint256;\\n    using Strings for uint160;\\n    using ToColor for bytes3;\\n    using TruncateAddress for string;\\n\\n    struct SVGParams {\\n        uint256 chainId;\\n        uint256 tokenId;\\n        bytes3 color_1;\\n        bytes3 color_2;\\n        bytes3 color_3;\\n        bytes3 color_4;\\n        address implementation;\\n        address mainAccount;\\n        address owner;\\n    }\\n\\n    // @dev generate SVG header\\n    function generateSVGHead() private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"290\\\" height=\\\"350\\\" viewBox=\\\"0 0 290 350\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">'\\n                )\\n            );\\n    }\\n\\n    function generateSVGDef() private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                '<defs>',\\n                '<clipPath id=\\\"corners\\\"><rect width=\\\"290\\\" height=\\\"350\\\" rx=\\\"42\\\" ry=\\\"42\\\"/>',\\n                '</clipPath></defs>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGBackground() private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"background\\\" clip-path=\\\"url(#corners)\\\">',\\n                '<rect fill=\\\"1f9840\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"290px\\\" height=\\\"350px\\\"/>',\\n                '<rect style=\\\"filter: url(#f1)\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"290px\\\" height=\\\"350px\\\"/>',\\n                '<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"290\\\" height=\\\"350\\\" rx=\\\"42\\\" ry=\\\"42\\\" fill=\\\"rgba(0,0,0,0)\\\" stroke=\\\"rgba(255,255,255,0.2)\\\"/></g>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGInnerBorder() private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"inner-border\\\">',\\n                '<rect x=\\\"16\\\" y=\\\"16\\\" width=\\\"258\\\" height=\\\"317\\\" rx=\\\"26\\\" ry=\\\"26\\\" fill=\\\"rgba(0,0,0,0)\\\" stroke=\\\"rgba(255,255,255,0.2)\\\"/></g>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGCircle() private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"circle\\\">',\\n                '<circle cx=\\\"139px\\\" cy=\\\"100px\\\" r=\\\"51px\\\" fill=\\\"none\\\" stroke=\\\"white\\\"/></g>'\\n            )\\n        );\\n    }\\n    \\n    function generateSVGInnerCircle_1(bytes3 _color) private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"inner-circle-1\\\">',\\n                '<circle cx=\\\"162px\\\" cy=\\\"73px\\\" r=\\\"8px\\\" fill=\\\"#',\\n                _color.toColor(),\\n                '\\\"/></g>'\\n            )\\n        );\\n    }\\n    \\n    function generateSVGInnerCircle_2(bytes3 _color) private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"inner-circle-2\\\">',\\n                '<circle cx=\\\"137px\\\" cy=\\\"97px\\\" r=\\\"15px\\\" fill=\\\"#',\\n               _color.toColor(),\\n                '\\\"/></g>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGInnerCircle_3(bytes3 _color) private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"inner-circle-3\\\">',\\n                '<circle cx=\\\"105px\\\" cy=\\\"98px\\\" r=\\\"9px\\\" fill=\\\"#',\\n               _color.toColor(),\\n                '\\\"/></g>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGInnerCircle_4(bytes3 _color) private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"inner-circle-4\\\">',\\n                '<circle cx=\\\"142px\\\" cy=\\\"138px\\\" r=\\\"12px\\\" fill=\\\"#',\\n               _color.toColor(),\\n                '\\\"/></g>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGID(uint256 _tokenId) private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"Id-text\\\" style=\\\"transform:translate(29px, 220px)\\\">',\\n                '<rect width=\\\"85px\\\" height=\\\"26px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"rgba(0,0,0,0.6)\\\"/>',\\n                '<text x=\\\"12px\\\" y=\\\"17px\\\" font-family=\\\"',\\n                \\\"'Courier New', monospace\\\",\\n                '\\\" font-size=\\\"20px\\\" fill=\\\"white\\\">',\\n                '<tspan fill=\\\"rgba(255,255,255,0.6)\\\">ID: </tspan>',\\n                unicode'\\ud83d\\udc8e',\\n                _tokenId.toString(),\\n                '</text></g>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGMainAccount(address _account) private pure returns (string memory svg) {\\n        string memory _accountAddress = _account == address(0) ? \\\"Not set\\\" : uint160(_account).toHexString(20).truncateAddress();\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"account-text\\\" style=\\\"transform:translate(29px, 255px)\\\">',\\n                '<rect width=\\\"218px\\\" height=\\\"26px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"rgba(0,0,0,0.6)\\\"/>',\\n                '<text x=\\\"12px\\\" y=\\\"17px\\\" font-family=\\\"',\\n                \\\"'Courier New', monospace\\\",\\n                '\\\" font-size=\\\"12px\\\" fill=\\\"white\\\">',\\n                '<tspan fill=\\\"rgba(255,255,255,0.6)\\\">Main Acc',\\n                unicode'\\ud83d\\udcbc',\\n                ': </tspan>',\\n                _accountAddress,\\n                '</text></g>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGOwner(address _owner) internal  pure returns (string memory svg) {\\n        string memory _ownerAddress =uint160( _owner).toHexString(20);\\n        svg = string(\\n            abi.encodePacked(\\n                '<g id=\\\"owner-text\\\" style=\\\"transform:translate(29px, 288px)\\\">',\\n                '<rect width=\\\"218px\\\" height=\\\"26px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"rgba(0,0,0,0.6)\\\"/>',\\n                '<text x=\\\"12px\\\" y=\\\"17px\\\" font-family=\\\"',\\n                \\\"'Courier New', monospace\\\",\\n                '\\\" font-size=\\\"12px\\\" fill=\\\"white\\\">',\\n                '<tspan fill=\\\"rgba(255,255,255,0.6)\\\">Owner',\\n                unicode'\\ud83e\\udd16',\\n                ': </tspan>',\\n                _ownerAddress.truncateAddress(),\\n                '</text></g>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGImage(SVGParams memory _svgParams) internal pure returns (string memory svg) {\\n        return string(\\n            abi.encodePacked(\\n                generateSVGHead(),\\n                generateSVGDef(),\\n                generateSVGBackground(),\\n                generateSVGInnerBorder(),\\n                generateSVGCircle(),\\n                generateSVGInnerCircle_1(_svgParams.color_1),\\n                generateSVGInnerCircle_2(_svgParams.color_2),\\n                generateSVGInnerCircle_3(_svgParams.color_3),\\n                generateSVGInnerCircle_4(_svgParams.color_4),\\n                generateSVGID(_svgParams.tokenId),\\n                generateSVGMainAccount(_svgParams.mainAccount),\\n                generateSVGOwner(_svgParams.owner),\\n                \\\"</svg>\\\"\\n            )\\n        );\\n  }\\n\\n    // @dev generate Json Metadata description\\n    function generateDescription(SVGParams memory params) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"This NFT has ID #\\\",\\n                    params.tokenId.toString(),\\n                    \\\" and is owned by \\\",\\n                    unicode\\\"\\ud83e\\udd16\\\",\\n                    uint160(params.owner).toHexString(20),\\n                    '\\\\\\\\n',\\n                    \\\"NBA NFT is an experiment\\\",\\n                    unicode\\\"\\ud83e\\uddea\\\",\\n                    \\\" at combining digital ownership with self-governing capabilities\\\"\\n                )\\n            );\\n    }\\n\\n    /// @dev generate Json Metadata attributes\\n    function generateAttributes(SVGParams memory _svgParams) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"[\\\",\\n                    getJsonAttribute(\\\"Chain ID\\\", _svgParams.chainId.toString(), false),\\n                    getJsonAttribute(\\\"Default Implementation\\\",uint160(_svgParams.implementation).toHexString(20), false),\\n                    abi.encodePacked(\\n                        getJsonAttribute(\\\"Main Account\\\", uint160(_svgParams.mainAccount).toHexString(20), false),\\n                        getJsonAttribute(\\\"Owner\\\", uint160(_svgParams.owner).toHexString(20), true),\\n                        \\\"]\\\"\\n                    )\\n                    \\n                )\\n            );\\n    }\\n\\n    /// @dev Get the json attribute as\\n    ///    {\\n    ///      \\\"trait_type\\\": \\\"Skin\\\",\\n    ///      \\\"value\\\": \\\"Human\\\"\\n    ///    }\\n    function getJsonAttribute(\\n        string memory trait,\\n        string memory value,\\n        bool end\\n    ) private pure returns (string memory json) {\\n        return string(abi.encodePacked('{ \\\"trait_type\\\" : \\\"', trait, '\\\", \\\"value\\\" : \\\"', value, '\\\" }', end ? \\\"\\\" : \\\",\\\"));\\n    }\\n}\",\"keccak256\":\"0x61a08674e66fd020d8c663266fd139aba1f0ef7b3053ce3abbfb5e6c7e0118ec\",\"license\":\"MIT\"},\"contracts/NBANFT/lib/ToColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ToColor {\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n\\n    function toColor(bytes3 value) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(6);\\n        for (uint256 i = 0; i < 3; i++) {\\n            buffer[i * 2 + 1] = ALPHABET[uint8(value[i]) & 0xf];\\n            buffer[i * 2] = ALPHABET[uint8(value[i] >> 4) & 0xf];\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xe60a9d972912e69cbbdb6dfc5d777d37a2bf50a9000a1a7e140c1e2b077fa979\",\"license\":\"MIT\"},\"contracts/NBANFT/lib/TruncateAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary TruncateAddress {\\n\\n    function truncateAddress(string memory _address) internal pure returns(string memory) {\\n        bytes memory addressBytes = bytes(_address);\\n        require(addressBytes.length == 42, \\\"Invalid address length\\\");\\n        \\n        // Taking first 6 characters ('0x' + first 4 characters of the address) \\n        // and the last 4 characters of the address.\\n        bytes memory result = new bytes(13);\\n        \\n        // Copying the first 6 characters\\n        for (uint i = 0; i < 6; i++) {\\n            result[i] = addressBytes[i];\\n        }\\n\\n        // Adding the ellipsis\\n        result[6] = '.';\\n        result[7] = '.';\\n        result[8] = '.';\\n\\n        // Copying the last 4 characters\\n        for (uint i = 0; i < 4; i++) {\\n            result[9 + i] = addressBytes[38 + i];\\n        }\\n        \\n        return string(result);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x217a407f81025d45d798367b2fffdde93b2cbae99c4a814e45040823afa7b396\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611d23908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c63c18f7c4c1461002757600080fd5b346100c5576101203660031901126100c5576100c16100b5610047610181565b6004358152602435602082015261005c6101a2565b60408201526100696101b9565b60608201526100766101d0565b60808201526100836101e7565b60a08201526100906101fe565b60c082015261009d610214565b60e08201526100aa61022a565b6101008201526102a7565b60405191829182610264565b0390f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b60c0810190811067ffffffffffffffff8211176100fd57604052565b6101056100ca565b604052565b6080810190811067ffffffffffffffff8211176100fd57604052565b610160810190811067ffffffffffffffff8211176100fd57604052565b6040810190811067ffffffffffffffff8211176100fd57604052565b90601f8019910116810190811067ffffffffffffffff8211176100fd57604052565b60405190610120820182811067ffffffffffffffff8211176100fd57604052565b604435906001600160e81b0319821682036100c557565b606435906001600160e81b0319821682036100c557565b608435906001600160e81b0319821682036100c557565b60a435906001600160e81b0319821682036100c557565b60c435906001600160a01b03821682036100c557565b60e435906001600160a01b03821682036100c557565b61010435906001600160a01b03821682036100c557565b60005b8381106102545750506000910152565b8181015183820152602001610244565b604091602082526102848151809281602086015260208686019101610241565b601f01601f1916010190565b906102a360209282815194859201610241565b0190565b60208101516102b590610500565b90604051809260208201644e4241202360d81b9052602582016102d791610290565b0391601f199283810182526102ec908261015f565b6102f58261083f565b6102fe90610756565b610307836118f9565b926103119061171f565b604051683d913730b6b2911d1160b91b60208201529384939091906029850161033991610290565b71111610113232b9b1b934b83a34b7b7111d1160711b815260120161035d91610290565b7001116101130ba3a3934b13aba32b9911d1607d1b815260110161038091610290565b6b16101134b6b0b3b2911d101160a11b8152600c017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a016103c491610290565b61227d60f01b81526002010382810182526103df908261015f565b6103e890610756565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d82015b61042391610290565b039081018252610433908261015f565b90565b60209067ffffffffffffffff8111610454575b601f01601f19160190565b61045c6100ca565b610449565b604051906020820182811067ffffffffffffffff821117610486575b60405260008252565b61048e6100ca565b61047d565b604051906060820182811067ffffffffffffffff8211176104c1575b604052602a8252604082602036910137565b6104c96100ca565b6104af565b906104d882610436565b6104e5604051918261015f565b82815280926104f6601f1991610436565b0190602036910137565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610635575b506d04ee2d6d415b85acef810000000080831015610626575b50662386f26fc1000080831015610617575b506305f5e10080831015610608575b50612710808310156105f9575b5060648210156105e9575b600a809210156105df575b6001908160216105978287016104ce565b95860101905b6105a9575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156105da5791908261059d565b6105a2565b9160010191610586565b919060646002910491019161057b565b60049193920491019138610570565b60089193920491019138610563565b60109193920491019138610554565b60209193920491019138610542565b604093508104915038610529565b604051906060820182811067ffffffffffffffff8211176106b4575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b6106bc6100ca565b61065f565b50634e487b7160e01b600052601160045260246000fd5b90600282018092116106e657565b6106ee6106c1565b565b90602082018092116106e657565b90600182018092116106e657565b60260190816026116106e657565b60090190816009116106e657565b600281901b91906001600160fe1b038116036106e657565b908160011b91808304600214901517156106e657565b80511561083657610765610643565b61078161077c61077584516106d8565b6003900490565b610728565b9161079361078e846106f0565b6104ce565b92835280815182019060208501935b8282106107e4575050506003905106806001146107d3576002146107c4575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c16880101516002860153168501015190820153019391906107a2565b50610433610461565b6108476109a6565b61084f610a59565b91610858610aef565b90610861610c89565b610869610d48565b60408301516001600160e81b03191661088190610dcc565b60608401516001600160e81b03191661089990610e74565b60808501516001600160e81b0319166108b190610f1d565b60a08601519092906001600160e81b0319166108cc90610fa5565b9360208701516108db90611086565b60e08801519096906001600160a01b03166108f590611280565b610100909801516001600160a01b031661090e906115f8565b986040519b8c9b60208d0161092291610290565b61092b91610290565b61093491610290565b61093d91610290565b61094691610290565b61094f91610290565b61095891610290565b61096191610290565b61096a91610290565b61097391610290565b61097c91610290565b61098591610290565b651e17b9bb339f60d11b815260060103601f1981018252610433908261015f565b6040517f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060208201527f30302f737667222077696474683d2232393022206865696768743d223335302260408201527f2076696577426f783d2230203020323930203335302220786d6c6e733a786c6960608201527f6e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b608082015261111f60f11b60a082015260828152610433816100e1565b604051651e3232b3399f60d11b60208201527f3c636c6970506174682069643d22636f726e657273223e3c726563742077696460268201527f74683d2232393022206865696768743d22333530222072783d223432222072796046820152661e911a1911179f60c91b6066820152711e17b1b634b82830ba341f1e17b232b3399f60711b606d820152605f81526104338161010a565b604080517f3c672069643d226261636b67726f756e642220636c69702d706174683d22757260208201526c361411b1b7b93732b93994911f60991b918101919091527f3c726563742066696c6c3d223166393834302220783d223070782220793d2230604d8201527f7078222077696474683d22323930707822206865696768743d22333530707822606d82015261179f60f11b608d8201527f3c72656374207374796c653d2266696c7465723a2075726c2823663129222078608f8201527f3d223070782220793d22307078222077696474683d223239307078222068656960af8201526c33b43a1e91199a98383c11179f60991b60cf8201527f3c7265637420783d22302220793d2230222077696474683d223239302220686560dc8201527f696768743d22333530222072783d223432222072793d223432222066696c6c3d60fc8201527f227267626128302c302c302c302922207374726f6b653d22726762612832353561011c8201527316191a9a96191a9a961817191491179f1e17b39f60611b61013c820152610130815261043381610126565b604051741e339034b21e9134b73732b916b137b93232b9111f60591b60208201527f3c7265637420783d2231362220793d223136222077696474683d22323538222060358201527f6865696768743d22333137222072783d223236222072793d223236222066696c60558201527f6c3d227267626128302c302c302c302922207374726f6b653d227267626128326075820152751a9a96191a9a96191a9a961817191491179f1e17b39f60511b6095820152608b8152610433816100e1565b6040516e1e339034b21e9131b4b931b632911f60891b60208201527f3c636972636c652063783d223133397078222063793d2231303070782220723d602f8201527f2235317078222066696c6c3d226e6f6e6522207374726f6b653d227768697465604f8201526611179f1e17b39f60c91b606f820152605681526104338161010a565b610dd590611b33565b610433606a60405180937f3c672069643d22696e6e65722d636972636c652d31223e00000000000000000060208301527f3c636972636c652063783d223136327078222063793d22373370782220723d2260378301526b387078222066696c6c3d222360a01b6057830152610e54815180926020606386019101610241565b81016611179f1e17b39f60c91b606382015203604a81018452018261015f565b610e7d90611b33565b610433606b60405180937f3c672069643d22696e6e65722d636972636c652d32223e00000000000000000060208301527f3c636972636c652063783d223133377078222063793d22393770782220723d2260378301526c31357078222066696c6c3d222360981b6057830152610efd815180926020606486019101610241565b81016611179f1e17b39f60c91b606482015203604b81018452018261015f565b610f2690611b33565b610433606a60405180937f3c672069643d22696e6e65722d636972636c652d33223e00000000000000000060208301527f3c636972636c652063783d223130357078222063793d22393870782220723d2260378301526b397078222066696c6c3d222360a01b6057830152610e54815180926020606386019101610241565b610fae90611b33565b610433606c60405180937f3c672069643d22696e6e65722d636972636c652d34223e00000000000000000060208301527f3c636972636c652063783d223134327078222063793d2231333870782220723d60378301526d2231327078222066696c6c3d222360901b605783015261102f815180926020606586019101610241565b81016611179f1e17b39f60c91b606582015203604c81018452018261015f565b7f3c7465787420783d22313270782220793d22313770782220666f6e742d66616d81526434b63c9e9160d91b602082015260250190565b6104336110956111f792610500565b61120e6040519384927f3c672069643d2249642d7465787422207374796c653d227472616e73666f726d60208501527f3a7472616e736c61746528323970782c20323230707829223e0000000000000060408501527f3c726563742077696474683d223835707822206865696768743d22323670782260598501527f2072783d22387078222072793d22387078222066696c6c3d227267626128302c60798501526a1816181618171b1491179f60a91b60998501526111f1606861115b60a4870161104f565b7727436f7572696572204e6577272c206d6f6e6f737061636560401b81527f2220666f6e742d73697a653d2232307078222066696c6c3d227768697465223e60188201527f3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e60388201526f1b14911f24a21d101e17ba39b830b71f60811b605882015263784fc94760e11b910190815260040190565b90610290565b6a1e17ba32bc3a1f1e17b39f60a91b8152600b0190565b03601f19810183528261015f565b7f3c726563742077696474683d22323138707822206865696768743d223236707881527f222072783d22387078222072793d22387078222066696c6c3d2272676261283060208201526b161816181618171b1491179f60a11b6040820152604c0190565b6001600160a01b0316806113df57506111f76104336040516112a181610143565b6007815266139bdd081cd95d60ca1b60208201525b61120e6040519384927f3c672069643d226163636f756e742d7465787422207374796c653d227472616e60208501527f73666f726d3a7472616e736c61746528323970782c20323535707829223e000060408501526111f16113c96113b961137b61135261132e611329605e8b0161121c565b61104f565b7727436f7572696572204e6577272c206d6f6e6f737061636560401b815260180190565b7f2220666f6e742d73697a653d2231327078222066696c6c3d227768697465223e815260200190565b7f3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e81526b3629223e4d61696e2041636360a01b6020820152602c0190565b633c27e4af60e21b815260040190565b691d101e17ba39b830b71f60b11b8152600a0190565b6113e7610493565b9060306113f3836114aa565b5360786113ff836114c0565b5360295b6001811161142a57506114256111f792611420610433931561153e565b611c31565b6112b6565b9080600f6114679216601081101561146c575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a61145d8486611504565b5360041c91611523565b611403565b611474611493565b61143d565b6040519061148682610143565b600d825260203681840137565b50634e487b7160e01b600052603260045260246000fd5b6020908051156114b8570190565b6102a3611493565b6021908051600110156114b8570190565b6026908051600610156114b8570190565b6027908051600710156114b8570190565b6028908051600810156114b8570190565b90602091805182101561151657010190565b61151e611493565b010190565b8015611531575b6000190190565b6115396106c1565b61152a565b1561154557565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b611591610493565b90603061159d836114aa565b5360786115a9836114c0565b536029905b600182116115c15761043391501561153e565b80600f6115f29216601081101561146c576f181899199a1a9b1b9c1cb0b131b232b360811b901a61145d8486611504565b906115ae565b6111f7906104339061161690611420906001600160a01b0316611589565b61120e6040519384927f3c672069643d226f776e65722d7465787422207374796c653d227472616e736660208501527f6f726d3a7472616e736c61746528323970782c20323838707829223e000000006040850152606f61167c611329605c870161121c565b7727436f7572696572204e6577272c206d6f6e6f737061636560401b81527f2220666f6e742d73697a653d2231327078222066696c6c3d227768697465223e60188201527f3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e6038820152681b14911f27bbb732b960b91b605882015263784fd24b60e11b6061820152691d101e17ba39b830b71f60b11b60658201520190610290565b6104336117476117326020840151610500565b610100909301516001600160a01b0316611589565b9161120e61180b6117fb60486040519687957054686973204e465420686173204944202360781b602088015261178781518092602060318b019101610241565b86017001030b7321034b99037bbb732b210313c9607d1b603182015263784fd24b60e11b60428201526117c4825180936020604685019101610241565b01612e3760f11b6046820152016018907f4e4241204e465420697320616e206578706572696d656e74000000000000000081520190565b63784fd3d560e11b815260040190565b7f20617420636f6d62696e696e67206469676974616c206f776e6572736869702081527f776974682073656c662d676f7665726e696e67206361706162696c6974696573602082015260400190565b6040519061186782610143565b600882526710da185a5b88125160c21b6020830152565b6040519061188b82610143565b60168252752232b330bab63a1024b6b83632b6b2b73a30ba34b7b760511b6020830152565b604051906118bd82610143565b600c82526b13585a5b881058d8dbdd5b9d60a21b6020830152565b604051906118e582610143565b600582526427bbb732b960d91b6020830152565b805161190490610500565b61190c61185a565b90611916916119fc565b60c0820151909190611930906001600160a01b0316611589565b61193861187e565b90611942916119fc565b60e082015190929061195c906001600160a01b0316611589565b6119646118b0565b9061196e916119fc565b6101009290920151611988906001600160a01b0316611589565b6119906118d8565b9061199a91611aac565b91604051928391602083016119ae91610290565b6119b791610290565b605d60f81b81526001010391601f199283810182526119d6908261015f565b604051605b60f81b6020820152938492602184016119f391610290565b61041a91610290565b604361043391604051611a0e81610143565b600181526020810190600b60fa1b8252611a9d604051968794713d90113a3930b4ba2fba3cb83291101d101160711b6020870152611a5681518092602060328a019101610241565b85016d111610113b30b63ab291101d101160911b6032820152611a83825180936020604085019101610241565b01916222207d60e81b604084015251809386840190610241565b0103602381018452018261015f565b604361043391604051602081019080821067ffffffffffffffff831117611b0e575b8160405260008152611a9d604051968794713d90113a3930b4ba2fba3cb83291101d101160711b6020870152611a5681518092602060328a019101610241565b611b166100ca565b611ace565b6001906000198114611b2b570190565b6102a36106c1565b90604051611b4081610143565b600681526020368183013760005b60038110611b5b57509150565b611bcd90600f85821a8181169160109182841015611bdf575b6f181899199a1a9b1b9c1cb0b131b232b360811b9384901a611ba6611ba0611b9b88610740565b6106fe565b89611504565b5360041c1690811015611bd2575b1a611bc7611bc183610740565b85611504565b53611b1b565b611b4e565b611bda611493565b611bb4565b611be7611493565b611b74565b15611bf357565b60405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840c2c8c8e4cae6e640d8cadccee8d60531b6044820152606490fd5b90611c3f602a835114611bec565b611c47611479565b60005b60068110611cca5750602e611c5e826114d1565b53602e611c6a826114e2565b53602e611c76826114f3565b5360005b60048110611c8757509150565b80611cae611ca0611c9a611cc59461070c565b87611504565b516001600160f81b03191690565b611bc7611cba8361071a565b9160001a9185611504565b611c7a565b80611cdb611ca0611ce89387611504565b60001a611bc78285611504565b611c4a56fea2646970667358221220a637b2fd5658475df384a043dd245b81429eb4e677d2dbbdadc73f915dc13d1364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c63c18f7c4c1461002757600080fd5b346100c5576101203660031901126100c5576100c16100b5610047610181565b6004358152602435602082015261005c6101a2565b60408201526100696101b9565b60608201526100766101d0565b60808201526100836101e7565b60a08201526100906101fe565b60c082015261009d610214565b60e08201526100aa61022a565b6101008201526102a7565b60405191829182610264565b0390f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b60c0810190811067ffffffffffffffff8211176100fd57604052565b6101056100ca565b604052565b6080810190811067ffffffffffffffff8211176100fd57604052565b610160810190811067ffffffffffffffff8211176100fd57604052565b6040810190811067ffffffffffffffff8211176100fd57604052565b90601f8019910116810190811067ffffffffffffffff8211176100fd57604052565b60405190610120820182811067ffffffffffffffff8211176100fd57604052565b604435906001600160e81b0319821682036100c557565b606435906001600160e81b0319821682036100c557565b608435906001600160e81b0319821682036100c557565b60a435906001600160e81b0319821682036100c557565b60c435906001600160a01b03821682036100c557565b60e435906001600160a01b03821682036100c557565b61010435906001600160a01b03821682036100c557565b60005b8381106102545750506000910152565b8181015183820152602001610244565b604091602082526102848151809281602086015260208686019101610241565b601f01601f1916010190565b906102a360209282815194859201610241565b0190565b60208101516102b590610500565b90604051809260208201644e4241202360d81b9052602582016102d791610290565b0391601f199283810182526102ec908261015f565b6102f58261083f565b6102fe90610756565b610307836118f9565b926103119061171f565b604051683d913730b6b2911d1160b91b60208201529384939091906029850161033991610290565b71111610113232b9b1b934b83a34b7b7111d1160711b815260120161035d91610290565b7001116101130ba3a3934b13aba32b9911d1607d1b815260110161038091610290565b6b16101134b6b0b3b2911d101160a11b8152600c017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a016103c491610290565b61227d60f01b81526002010382810182526103df908261015f565b6103e890610756565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d82015b61042391610290565b039081018252610433908261015f565b90565b60209067ffffffffffffffff8111610454575b601f01601f19160190565b61045c6100ca565b610449565b604051906020820182811067ffffffffffffffff821117610486575b60405260008252565b61048e6100ca565b61047d565b604051906060820182811067ffffffffffffffff8211176104c1575b604052602a8252604082602036910137565b6104c96100ca565b6104af565b906104d882610436565b6104e5604051918261015f565b82815280926104f6601f1991610436565b0190602036910137565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610635575b506d04ee2d6d415b85acef810000000080831015610626575b50662386f26fc1000080831015610617575b506305f5e10080831015610608575b50612710808310156105f9575b5060648210156105e9575b600a809210156105df575b6001908160216105978287016104ce565b95860101905b6105a9575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156105da5791908261059d565b6105a2565b9160010191610586565b919060646002910491019161057b565b60049193920491019138610570565b60089193920491019138610563565b60109193920491019138610554565b60209193920491019138610542565b604093508104915038610529565b604051906060820182811067ffffffffffffffff8211176106b4575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b6106bc6100ca565b61065f565b50634e487b7160e01b600052601160045260246000fd5b90600282018092116106e657565b6106ee6106c1565b565b90602082018092116106e657565b90600182018092116106e657565b60260190816026116106e657565b60090190816009116106e657565b600281901b91906001600160fe1b038116036106e657565b908160011b91808304600214901517156106e657565b80511561083657610765610643565b61078161077c61077584516106d8565b6003900490565b610728565b9161079361078e846106f0565b6104ce565b92835280815182019060208501935b8282106107e4575050506003905106806001146107d3576002146107c4575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c16880101516002860153168501015190820153019391906107a2565b50610433610461565b6108476109a6565b61084f610a59565b91610858610aef565b90610861610c89565b610869610d48565b60408301516001600160e81b03191661088190610dcc565b60608401516001600160e81b03191661089990610e74565b60808501516001600160e81b0319166108b190610f1d565b60a08601519092906001600160e81b0319166108cc90610fa5565b9360208701516108db90611086565b60e08801519096906001600160a01b03166108f590611280565b610100909801516001600160a01b031661090e906115f8565b986040519b8c9b60208d0161092291610290565b61092b91610290565b61093491610290565b61093d91610290565b61094691610290565b61094f91610290565b61095891610290565b61096191610290565b61096a91610290565b61097391610290565b61097c91610290565b61098591610290565b651e17b9bb339f60d11b815260060103601f1981018252610433908261015f565b6040517f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060208201527f30302f737667222077696474683d2232393022206865696768743d223335302260408201527f2076696577426f783d2230203020323930203335302220786d6c6e733a786c6960608201527f6e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b608082015261111f60f11b60a082015260828152610433816100e1565b604051651e3232b3399f60d11b60208201527f3c636c6970506174682069643d22636f726e657273223e3c726563742077696460268201527f74683d2232393022206865696768743d22333530222072783d223432222072796046820152661e911a1911179f60c91b6066820152711e17b1b634b82830ba341f1e17b232b3399f60711b606d820152605f81526104338161010a565b604080517f3c672069643d226261636b67726f756e642220636c69702d706174683d22757260208201526c361411b1b7b93732b93994911f60991b918101919091527f3c726563742066696c6c3d223166393834302220783d223070782220793d2230604d8201527f7078222077696474683d22323930707822206865696768743d22333530707822606d82015261179f60f11b608d8201527f3c72656374207374796c653d2266696c7465723a2075726c2823663129222078608f8201527f3d223070782220793d22307078222077696474683d223239307078222068656960af8201526c33b43a1e91199a98383c11179f60991b60cf8201527f3c7265637420783d22302220793d2230222077696474683d223239302220686560dc8201527f696768743d22333530222072783d223432222072793d223432222066696c6c3d60fc8201527f227267626128302c302c302c302922207374726f6b653d22726762612832353561011c8201527316191a9a96191a9a961817191491179f1e17b39f60611b61013c820152610130815261043381610126565b604051741e339034b21e9134b73732b916b137b93232b9111f60591b60208201527f3c7265637420783d2231362220793d223136222077696474683d22323538222060358201527f6865696768743d22333137222072783d223236222072793d223236222066696c60558201527f6c3d227267626128302c302c302c302922207374726f6b653d227267626128326075820152751a9a96191a9a96191a9a961817191491179f1e17b39f60511b6095820152608b8152610433816100e1565b6040516e1e339034b21e9131b4b931b632911f60891b60208201527f3c636972636c652063783d223133397078222063793d2231303070782220723d602f8201527f2235317078222066696c6c3d226e6f6e6522207374726f6b653d227768697465604f8201526611179f1e17b39f60c91b606f820152605681526104338161010a565b610dd590611b33565b610433606a60405180937f3c672069643d22696e6e65722d636972636c652d31223e00000000000000000060208301527f3c636972636c652063783d223136327078222063793d22373370782220723d2260378301526b387078222066696c6c3d222360a01b6057830152610e54815180926020606386019101610241565b81016611179f1e17b39f60c91b606382015203604a81018452018261015f565b610e7d90611b33565b610433606b60405180937f3c672069643d22696e6e65722d636972636c652d32223e00000000000000000060208301527f3c636972636c652063783d223133377078222063793d22393770782220723d2260378301526c31357078222066696c6c3d222360981b6057830152610efd815180926020606486019101610241565b81016611179f1e17b39f60c91b606482015203604b81018452018261015f565b610f2690611b33565b610433606a60405180937f3c672069643d22696e6e65722d636972636c652d33223e00000000000000000060208301527f3c636972636c652063783d223130357078222063793d22393870782220723d2260378301526b397078222066696c6c3d222360a01b6057830152610e54815180926020606386019101610241565b610fae90611b33565b610433606c60405180937f3c672069643d22696e6e65722d636972636c652d34223e00000000000000000060208301527f3c636972636c652063783d223134327078222063793d2231333870782220723d60378301526d2231327078222066696c6c3d222360901b605783015261102f815180926020606586019101610241565b81016611179f1e17b39f60c91b606582015203604c81018452018261015f565b7f3c7465787420783d22313270782220793d22313770782220666f6e742d66616d81526434b63c9e9160d91b602082015260250190565b6104336110956111f792610500565b61120e6040519384927f3c672069643d2249642d7465787422207374796c653d227472616e73666f726d60208501527f3a7472616e736c61746528323970782c20323230707829223e0000000000000060408501527f3c726563742077696474683d223835707822206865696768743d22323670782260598501527f2072783d22387078222072793d22387078222066696c6c3d227267626128302c60798501526a1816181618171b1491179f60a91b60998501526111f1606861115b60a4870161104f565b7727436f7572696572204e6577272c206d6f6e6f737061636560401b81527f2220666f6e742d73697a653d2232307078222066696c6c3d227768697465223e60188201527f3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e60388201526f1b14911f24a21d101e17ba39b830b71f60811b605882015263784fc94760e11b910190815260040190565b90610290565b6a1e17ba32bc3a1f1e17b39f60a91b8152600b0190565b03601f19810183528261015f565b7f3c726563742077696474683d22323138707822206865696768743d223236707881527f222072783d22387078222072793d22387078222066696c6c3d2272676261283060208201526b161816181618171b1491179f60a11b6040820152604c0190565b6001600160a01b0316806113df57506111f76104336040516112a181610143565b6007815266139bdd081cd95d60ca1b60208201525b61120e6040519384927f3c672069643d226163636f756e742d7465787422207374796c653d227472616e60208501527f73666f726d3a7472616e736c61746528323970782c20323535707829223e000060408501526111f16113c96113b961137b61135261132e611329605e8b0161121c565b61104f565b7727436f7572696572204e6577272c206d6f6e6f737061636560401b815260180190565b7f2220666f6e742d73697a653d2231327078222066696c6c3d227768697465223e815260200190565b7f3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e81526b3629223e4d61696e2041636360a01b6020820152602c0190565b633c27e4af60e21b815260040190565b691d101e17ba39b830b71f60b11b8152600a0190565b6113e7610493565b9060306113f3836114aa565b5360786113ff836114c0565b5360295b6001811161142a57506114256111f792611420610433931561153e565b611c31565b6112b6565b9080600f6114679216601081101561146c575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a61145d8486611504565b5360041c91611523565b611403565b611474611493565b61143d565b6040519061148682610143565b600d825260203681840137565b50634e487b7160e01b600052603260045260246000fd5b6020908051156114b8570190565b6102a3611493565b6021908051600110156114b8570190565b6026908051600610156114b8570190565b6027908051600710156114b8570190565b6028908051600810156114b8570190565b90602091805182101561151657010190565b61151e611493565b010190565b8015611531575b6000190190565b6115396106c1565b61152a565b1561154557565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b611591610493565b90603061159d836114aa565b5360786115a9836114c0565b536029905b600182116115c15761043391501561153e565b80600f6115f29216601081101561146c576f181899199a1a9b1b9c1cb0b131b232b360811b901a61145d8486611504565b906115ae565b6111f7906104339061161690611420906001600160a01b0316611589565b61120e6040519384927f3c672069643d226f776e65722d7465787422207374796c653d227472616e736660208501527f6f726d3a7472616e736c61746528323970782c20323838707829223e000000006040850152606f61167c611329605c870161121c565b7727436f7572696572204e6577272c206d6f6e6f737061636560401b81527f2220666f6e742d73697a653d2231327078222066696c6c3d227768697465223e60188201527f3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e6038820152681b14911f27bbb732b960b91b605882015263784fd24b60e11b6061820152691d101e17ba39b830b71f60b11b60658201520190610290565b6104336117476117326020840151610500565b610100909301516001600160a01b0316611589565b9161120e61180b6117fb60486040519687957054686973204e465420686173204944202360781b602088015261178781518092602060318b019101610241565b86017001030b7321034b99037bbb732b210313c9607d1b603182015263784fd24b60e11b60428201526117c4825180936020604685019101610241565b01612e3760f11b6046820152016018907f4e4241204e465420697320616e206578706572696d656e74000000000000000081520190565b63784fd3d560e11b815260040190565b7f20617420636f6d62696e696e67206469676974616c206f776e6572736869702081527f776974682073656c662d676f7665726e696e67206361706162696c6974696573602082015260400190565b6040519061186782610143565b600882526710da185a5b88125160c21b6020830152565b6040519061188b82610143565b60168252752232b330bab63a1024b6b83632b6b2b73a30ba34b7b760511b6020830152565b604051906118bd82610143565b600c82526b13585a5b881058d8dbdd5b9d60a21b6020830152565b604051906118e582610143565b600582526427bbb732b960d91b6020830152565b805161190490610500565b61190c61185a565b90611916916119fc565b60c0820151909190611930906001600160a01b0316611589565b61193861187e565b90611942916119fc565b60e082015190929061195c906001600160a01b0316611589565b6119646118b0565b9061196e916119fc565b6101009290920151611988906001600160a01b0316611589565b6119906118d8565b9061199a91611aac565b91604051928391602083016119ae91610290565b6119b791610290565b605d60f81b81526001010391601f199283810182526119d6908261015f565b604051605b60f81b6020820152938492602184016119f391610290565b61041a91610290565b604361043391604051611a0e81610143565b600181526020810190600b60fa1b8252611a9d604051968794713d90113a3930b4ba2fba3cb83291101d101160711b6020870152611a5681518092602060328a019101610241565b85016d111610113b30b63ab291101d101160911b6032820152611a83825180936020604085019101610241565b01916222207d60e81b604084015251809386840190610241565b0103602381018452018261015f565b604361043391604051602081019080821067ffffffffffffffff831117611b0e575b8160405260008152611a9d604051968794713d90113a3930b4ba2fba3cb83291101d101160711b6020870152611a5681518092602060328a019101610241565b611b166100ca565b611ace565b6001906000198114611b2b570190565b6102a36106c1565b90604051611b4081610143565b600681526020368183013760005b60038110611b5b57509150565b611bcd90600f85821a8181169160109182841015611bdf575b6f181899199a1a9b1b9c1cb0b131b232b360811b9384901a611ba6611ba0611b9b88610740565b6106fe565b89611504565b5360041c1690811015611bd2575b1a611bc7611bc183610740565b85611504565b53611b1b565b611b4e565b611bda611493565b611bb4565b611be7611493565b611b74565b15611bf357565b60405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840c2c8c8e4cae6e640d8cadccee8d60531b6044820152606490fd5b90611c3f602a835114611bec565b611c47611479565b60005b60068110611cca5750602e611c5e826114d1565b53602e611c6a826114e2565b53602e611c76826114f3565b5360005b60048110611c8757509150565b80611cae611ca0611c9a611cc59461070c565b87611504565b516001600160f81b03191690565b611bc7611cba8361071a565b9160001a9185611504565b611c7a565b80611cdb611ca0611ce89387611504565b60001a611bc78285611504565b611c4a56fea2646970667358221220a637b2fd5658475df384a043dd245b81429eb4e677d2dbbdadc73f915dc13d1364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}